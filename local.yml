---
- name: Install Ansible Desktop
  hosts: localhost
  connection: local
  become: true
  vars:
    - user: diego
    - home: "/home/{{ user }}"
    - localbin: "{{ home }}/.local/bin"
    - github_username: diegoaldarondo
    - ssh_key: "{{ home }}/.ssh/id_25519"
    - ssh_key_pub: "{{ home }}/.ssh/id_25519.pub"
    - lazygit_dest: "{{ localbin }}/lazygit"
    - miniconda_script: "{{ home }}/miniconda.sh"
    - miniconda_install_dir: "{{ home }}/miniconda3"


  tasks:
    - name: install packages
      package:
        name: 
          - htop
          - tmux
          - bat
          - dconf-cli
          - python3-psutil
          - inkscape
          - git
          - tealdeer

    - name: Make .local/bin
      file:
        path: "{{ localbin }}"
        state: directory
        owner: diego
        group: diego

    - name: Clone fzf repository
      ansible.builtin.git:
        repo: https://github.com/junegunn/fzf.git
        dest: "{{ home }}/.fzf"
        version: master
        depth: 1
      register: clone_result

    - name: Run fzf installation script
      ansible.builtin.shell:
        cmd: "{{ home }}/.fzf/install --all"
      when: clone_result is changed

    - name: Get the latest lazygit version
      ansible.builtin.uri:
        url: https://api.github.com/repos/jesseduffield/lazygit/releases/latest
        method: GET
        return_content: yes
      register: lazygit_release

    - name: Download lazygit tar.gz
      ansible.builtin.get_url:
        url: "https://github.com/jesseduffield/lazygit/releases/latest/download/lazygit_{{ lazygit_release.json.tag_name | regex_replace('^v', '') }}_Linux_x86_64.tar.gz"
        dest: "{{ localbin }}/lazygit.tar.gz"
        mode: '0755'

    - name: Extract lazygit from tar.gz
      ansible.builtin.unarchive:
        src: "{{ localbin }}/lazygit.tar.gz"
        dest: "{{ localbin }}"
        remote_src: yes
        
    - name: Remove temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ localbin }}/lazygit.tar.gz"

    - name: Check if ripgrep is already installed
      ansible.builtin.stat:
        path: "{{ localbin }}/rg"
      register: rg_stat

    - name: Fetch latest ripgrep release from GitHub
      ansible.builtin.uri:
        url: "https://api.github.com/repos/BurntSushi/ripgrep/releases/latest"
        return_content: yes
        headers:
          Accept: "application/vnd.github.v3+json"
      register: rg_release
      when: not rg_stat.stat.exists

    - name: Set ripgrep download URL
      set_fact:
        ripgrep_download_url: "{{ rg_release.json.assets | selectattr('name', 'match', 'ripgrep-.*-x86_64-unknown-linux-musl.tar.gz') | map(attribute='browser_download_url') | first }}"
      when: not rg_stat.stat.exists

    - name: Download ripgrep tar.gz
      ansible.builtin.get_url:
        url: "{{ ripgrep_download_url }}"
        dest: "{{ localbin }}/ripgrep.tar.gz"
      when: not rg_stat.stat.exists

    - name: Create installation directory
      ansible.builtin.file:
        path: "{{ localbin }}"
        state: directory
      when: not rg_stat.stat.exists

    - name: Extract ripgrep
      ansible.builtin.unarchive:
        src: "{{ localbin }}/ripgrep.tar.gz"
        dest: "{{ localbin }}"
        remote_src: yes
        extra_opts: "--strip-components=1"
      when: not rg_stat.stat.exists

    - name: Remove ripgrep tar.gz
      ansible.builtin.file:
        path: "{{ localbin }}/ripgrep.tar.gz"
        state: absent
      when: not rg_stat.stat.exists

    - name: Check if notes repository is already installed
      ansible.builtin.stat:
        path: "{{ home }}/notes"
      register: repo_stat

    - name: Clone notes repository
      become_user: diego
      ansible.builtin.git:
        repo: "git@github.com:diegoaldarondo/notes.git"
        dest: "{{ home }}/notes"
        version: "HEAD"
      when: not repo_stat.stat.exists

    - name: Check if miniconda is already installed
      ansible.builtin.stat:
        path: "{{ miniconda_install_dir }}"
      register: miniconda_stat

    - name: Download Miniconda installation script
      ansible.builtin.get_url:
        url: https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
        dest: "{{ miniconda_script }}"
        mode: '0755'
      when: not miniconda_stat.stat.exists

    - name: Install Miniconda
      ansible.builtin.command:
        cmd: "{{ miniconda_script }} -b -p {{ miniconda_install_dir }}"
      args:
        creates: "{{ miniconda_install_dir }}"
      when: not miniconda_stat.stat.exists
      
    - name: Remove Miniconda installation script
      ansible.builtin.file:
        path: "{{ miniconda_script }}"
        state: absent
      when: not miniconda_stat.stat.exists

    - name: copy wallpaper file
      copy:
        src: files/wallpaper.jpg
        dest: /usr/share/backgrounds/ansible-wallpaper.jpg
        owner: diego
        group: diego

    - name: set wallpaper
      become_user: diego
      dconf:
        key: "/org/gnome/desktop/background/picture-uri"
        value: "'file:///usr/share/backgrounds/ansible-wallpaper.jpg'"
    
    - name: set wallpaper position
      become_user: diego
      dconf:
        key: "/org/gnome/desktop/background/picture-options"
        value: "'zoom'"

    - name: copy bashrc file
      copy:
        src: files/bash/.bashrc
        dest: /home/diego/.bashrc
        owner: diego
        group: diego
    
    - name: copy bash aliases file
      copy:
        src: files/bash/.bash_aliases
        dest: /home/diego/.bash_aliases
        owner: diego
        group: diego
        
    - name: copy .gitconfig file
      copy:
        src: files/git/.gitconfig
        dest: /home/diego/.gitconfig
        owner: diego
        group: diego
 
    - name: copy ssh config file
      copy:
        src: files/ssh/config
        dest: /home/diego/.ssh/config
        owner: diego
        group: diego

    - name: Install vscode deb
      become: yes
      apt:
        deb: https://go.microsoft.com/fwlink/?LinkID=760868
        
    - name: Ensure VSCode settings directory exists
      file:
        path: /home/diego/.config/Code/User
        state: directory
        owner: diego
        group: diego

    - name: Install VSCode extensions
      ansible.builtin.command:
        cmd: "code --install-extension {{ item }}"
      loop:
        - alefragnani.project-manager
        - GitHub.copilot
        - GitHub.copilot-chat
        - ms-python.python
        - ms-python.vscode-pylance
        - ms-toolsai.jupyter
        - ms-toolsai.jupyter-keymap
        - ms-toolsai.jupyter-renderers
        - ms-toolsai.vscode-jupyter-cell-tags
        - ms-toolsai.vscode-jupyter-slideshow
        - ms-vscode-remote.remote-containers
        - ms-vscode-remote.remote-ssh
        - ms-vscode-remote.remote-ssh-edit
        - ms-vscode-remote.remote-wsl
        - ms-vscode-remote.vscode-remote-extensionpack
        - ms-vscode.cmake-tools
        - ms-vscode.cpptools
        - ms-vscode.cpptools-extension-pack
        - ms-vscode.cpptools-themes
        - ms-vscode.remote-explorer
        - ms-vscode.remote-server
        - onnovalkering.vscode-singularity
        - tomoki1207.pdf
        - twxs.cmake
        - zhuangtongfa.material-theme
      become: no

    - name: copy vscode settings
      copy:
        src: files/vscode/settings.json
        dest: /home/diego/.config/Code/User/settings.json
        owner: diego
        group: diego

    - name: copy vscode keybindings
      copy:
        src: files/vscode/keybindings.json
        dest: /home/diego/.config/Code/User/keybindings.json
        owner: diego
        group: diego

    - name: Copy GNOME settings files
      ansible.builtin.copy:
        src: "files/gnome/{{ item }}"
        dest: "/tmp/{{ item }}"
      loop:
        - gnome_terminal_settings.dconf

    - name: Load GNOME terminal settings
      become_user: diego
      ansible.builtin.shell:
        cmd: "cat /tmp/gnome_terminal_settings.dconf | dconf load /org/gnome/terminal/"
    

      

      
      
